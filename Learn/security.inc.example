####################################################
# Custom headers and security section

# prevent access to htacess, git and svn resources
location ~ /\. {
return 404;
}
# Return a 404 for protected directories
location ~ /(?:config|tmp|vendor)/ {
return 404;
}
# Return a 404 for package manager config files
location ~ (?:composer(.+)json|composer(.+)lock|bower(.+)json)$ {
return 404;
}
# Return a 404 for all text files.
location ~* (?:README|LICENSE|LEGALNOTICE|\.txt|\.md)$ {
return 404;
}

# Server version number removal (nginx/1.10.2 becomes nginx)
# http://stackoverflow.com/questions/24594971/how-to-changehide-the-nginx-server-signature
server_tokens       off;

# ClickJacking protection
add_header          X-Frame-Options DENY;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://maps.googleapis.com https://maps.gstatic.com https://www.google-analytics.com; img-src 'self' data: https://maps.googleapis.com https://maps.gstatic.com https://csi.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src 'none'; connect-src 'self' https://maps.googleapis.com";
# The following rule cannot be added to the above parameter, because it prevents Chrome PDF plugin execution
#; object-src 'none'";

####
# X-Content-Security-Policy
# X-Webkit-CSP
####

# End of custom headers section
####################################################
